#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# This application is released under the GNU General Public License 
# v3 (or, at your option, any later version). You can find the full 
# text of the license under http://www.gnu.org/licenses/gpl.txt
# By using, editing and/or distributing this software you agree to 
# the terms and conditions of this license.
#_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

# original application : eyez - !v1.0~mickyz(c)2012
# simplified to cyclope, a simple image viewer - thuban (yeuxdelibad.net) © 2015

import sys
import os
import gobject
import gtk
from gtk import gdk
import gettext

progname = "cyclope"
version = "1.5"
auteur = "Thuban" 
licence = "GPLv3" 
homepage= "https://3hg.fr"
cyclopeicon = "/usr/share/pixmaps/cyclope_icon.png"
minimal_w = 420
minimal_h = 180
screen_ratio = 0.85

EXT = ('.bmp','.ico','.gif','.jpg','.jpeg','.png','.svg','.svgz','.tif','.tiff')
editors = [{'app' :'gimp', 'name' :'gimp'},\
        {'app' :'lodraw', 'name' :'Libreoffice Draw'},
        {'app' :'gthumb', 'name' :'gthumb'},\
        {'app' :'gpaint', 'name' :'gpaint'},\
        {'app' :'inkscape', 'name' :'inkscape'},\
        {'app' :'shotwell', 'name' :'shotwell'}]

gettext.bindtextdomain(progname, '/usr/share/locale')
gettext.textdomain(progname)
_ = gettext.gettext

def listFiles(directory):
    files = [ f for f in sorted(os.listdir(directory)) if os.path.splitext(f.lower())[1] in EXT ]
    return(files)

def help():
    print("usage : {} /path/to/picture".format(sys.argv[0]))

def error_dlg(error):
    m = gtk.MessageDialog(type=gtk.MESSAGE_ERROR,\
        buttons = gtk.BUTTONS_OK)
    m.set_markup(_("""Error while opening this file. Sorry \n {}""").format(error))
    ret = m.run()
    if ret == gtk.RESPONSE_DELETE_EVENT or ret == gtk.RESPONSE_OK:
        m.destroy()
    sys.exit(1)

def select_image():
    """return choosed filename or None"""
    chooser = gtk.FileChooserDialog(title=_("Open a picture"),action=gtk.FILE_CHOOSER_ACTION_OPEN,\
                buttons=(gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL,gtk.STOCK_OPEN,gtk.RESPONSE_OK))
    chooser.set_current_folder(os.getcwd())
    filter = gtk.FileFilter()
    filter.set_name(_("Images"))
    mimes = ["image/png", "image/jpeg", "image/gif"]
    for m in mimes:
        filter.add_mime_type(m)
    patterns = [ "*.bmp", "*.ico", "*.gif", "*.jpg", "*.jpeg", "*.png",\
            "*.svg", "*.svgz", "*.tif", "*.tiff" ]
    for p in patterns :
        filter.add_pattern(p)
    chooser.add_filter(filter)

    response = chooser.run()
    if response == gtk.RESPONSE_OK:
        i = chooser.get_filename()
        chooser.destroy()
        return(i)
    else:
        print(_('Closed, no files selected'))
        chooser.destroy()
        return(None)

class Cyclope():
    def __init__(self, img):
        # variables
        self.imginfo = { 'path': str(), 'pixbuf': str(), 'is_static': True, 'width':0, 'height':0 }
        self.isfull = False # fullscreen or not
        self.oldtime = 0
        
        # to zoom or not to zoom
        self.zoommode = False 
        self.tozoom = False
        self.xz, self.yz, self.wz, self.hz = 0, 0, 0, 0

        self.diapomode = False

        self.image = gtk.Image() # L'image affichée

        # La fenêtre principale
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_position(gtk.WIN_POS_CENTER_ALWAYS)
        self.window.modify_bg(gtk.STATE_NORMAL, gtk.gdk.color_parse("#222222")) # Fond sombre

        # La taille de l'écran
        self.sw,self.sh = gdk.screen_width() *screen_ratio, gdk.screen_height() *screen_ratio

        # Les boutons de la fenêtre
        self.rightarrow = gtk.Button(stock=gtk.STOCK_GO_FORWARD)
        self.leftarrow = gtk.Button(stock=gtk.STOCK_GO_BACK)
        self.fullbtn = gtk.Button(stock=gtk.STOCK_FULLSCREEN)
        self.quitbtn = gtk.Button(stock=gtk.STOCK_QUIT)

        self.rightarrow.connect("button_release_event", lambda x,y: self.skipImage(+1))
        self.leftarrow.connect("button_release_event", lambda x,y: self.skipImage(-1))
        self.fullbtn.connect("button_release_event", lambda x,y: self.toggle_fullscreen())
        self.quitbtn.connect("button_release_event", lambda x,y: self.quit_app())

        self.buttons = gtk.HBox(True,0)
        self.buttons.pack_start(self.leftarrow,False, True,0)
        self.buttons.pack_start(self.rightarrow, False,True,0)
        self.buttons.pack_start(self.fullbtn, False,True,0)
        self.buttons.pack_start(self.quitbtn, False,True,0)

        for i in self.buttons: # disable keyboard focus
            if type(i) == gtk.Button: i.set_can_focus(False)

        # boite contenant l'image
        self.evbox = gtk.EventBox()
        self.evbox.add(self.image)
        self.evbox.modify_bg(gtk.STATE_NORMAL, gtk.gdk.color_parse('#222222')) # fond sombre
        # pour récupérer les informations nécessaires au zoom
        self.evbox.connect("button_release_event", self.apply_zoom)
        self.evbox.connect("motion_notify_event", self.motion_notify_event)
        
        # pour pas que la evbox prenne toute la place
        imgbox = gtk.HBox(False,0)
        imgbox.pack_start(self.evbox,True,False,0)
        
        # La boite qui contient tout
        self.container = gtk.VBox(False,0)
        self.container.pack_start(imgbox, True, False,0)
        self.container.pack_start(self.buttons, False, False, 0)

        # configuration de la fenêtre
        self.window.add(self.container)
        self.window.set_border_width(4) # pour avoir une bordure 
        self.window.set_decorated(False)
        if os.path.isfile(cyclopeicon):
            self.window.set_icon_from_file(cyclopeicon)
        
        self.window.add_events(gdk.BUTTON_PRESS_MASK | gdk.KEY_PRESS_MASK | gdk.SCROLL_MASK)
        self.window.connect('button_press_event', self.onButtonPress)
        self.window.connect('key_release_event', self.onKeyPress)
        self.window.connect('delete_event', self.quit_app)

        self.window.show_all()
        self.set_image(img)

        gtk.main()

        
    def quit_app(self):
        self.window.hide()
        gtk.main_quit()
        return(True)
    
    def diaporama(self):
        if not self.diapomode:
            self.diapomode = True
            gobject.timeout_add(2000, self.diapo_cycle)
        else:
            self.diapomode = False

    def diapo_cycle(self):
        if self.diapomode:
            self.skipImage(+1)
            gobject.timeout_add(3000, self.diapo_cycle)

    def back_to_nomal(self):
        self.set_image(self.imginfo['path'])
        self.updateimage()

    def toggle_zoom(self):
        if self.zoommode == True:
            self.zoommode = False
            self.evbox.window.set_cursor(None) 
            self.back_to_nomal()
        else:
            self.zoommode = True
            watch = gtk.gdk.Cursor(gtk.gdk.CROSS)
            self.evbox.window.set_cursor(watch)      
    
    def apply_zoom(self, widget, event):
        # on appuie sur entrée pour valider le zoom
        if self.zoommode and self.imginfo['is_static'] and self.tozoom : # pas besoin d'aller plus loin sinon
            # dimensions de la grande image
            oldw, oldh = self.imginfo['width'], self.imginfo['height']
            
            pix=self.image.get_pixbuf() # on récupère l'image actuelle
            zoomed_pix = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, True, 8, self.wz, self.hz)
            pix.copy_area(self.xz, self.yz, self.wz, self.hz, zoomed_pix, 0, 0)  # on garde que la zone souhaitée

            # on met l'image aux dimensions de la fenêtre précédente
            ow,oh = self.sw, self.hz*self.sw/self.wz

            zoomed_pix = zoomed_pix.scale_simple(int(ow),int(oh), gdk.INTERP_BILINEAR)
            # mise à jour des informations de l'image
            self.imginfo['pixbuf'] = zoomed_pix
            self.imginfo['width'], self.imginfo['height'] = zoomed_pix.get_width(), zoomed_pix.get_height()
            
            self.image.set_from_pixbuf(zoomed_pix)
            
            self.updateimage()
            self.tozoom = False

            del pix
            del zoomed_pix            
                
    def motion_notify_event(self, widget, event):
        if self.zoommode and self.imginfo['is_static']: # pas besoin d'aller plus loin sinon
            # dimensions de la grande image
            oldw, oldh = self.imginfo['width'], self.imginfo['height']
            # récupération des données
            x, y = int(event.x), int(event.y)
            
            # attention au dépassements
            if x > oldw : x = oldw
            if x < 0 : x = 0
            if y > oldh : y = oldh
            if y < 0 : y = 0
            
            if x > self.xz_orig:
                self.wz = x - self.xz_orig
                self.xz = self.xz_orig
            else:
                self.wz = abs(x - self.xz_orig)
                self.xz = x

            if y > self.yz_orig:
                self.hz = y - self.yz_orig
                self.yz = self.yz_orig
            else:
                self.hz = abs(y - self.yz_orig)
                self.yz = y
            
            state = event.state
        
            if state & gtk.gdk.BUTTON1_MASK:
                cr = self.image.window.cairo_create()
                cr.set_source_pixbuf(self.image.get_pixbuf(),0,0) # pour effacer l'ancien rect
                cr.paint()
                cr.stroke()
                cr.set_source_rgba(0.25, 0.69, 1, 0.5)
                cr.rectangle(self.xz, self.yz, self.wz, self.hz)
                cr.fill()
                self.tozoom = True
    
    def set_image(self, img):
        """ Render the Pixbuf and show the image """
        self.get_infos(img)

        self.updateimage()

        # Quelques infos dans le titre de la fenêtre
        self.window.set_title('{} ! {}x{}'.format(\
                os.path.basename(img), self.imginfo['width'], self.imginfo['height']))

    def get_infos(self, img):
        """put image path, pixbuf and bool_static in self.imginfo"""
        if img.endswith('.gif'):
            pix = gdk.PixbufAnimation(img)
            if pix.is_static_image():
                self.imginfo = { 'path': '', 'pixbuf': '', 'is_static': True, 'width':0, 'height':0 }
                self.imginfo['path'] = img
                self.imginfo['pixbuf'] = pix.get_static_image().apply_embedded_orientation()
                self.imginfo['is_static'] = True
            else:
                self.imginfo['path'] = img
                self.imginfo['pixbuf'] = pix
                self.imginfo['is_static'] = False
        else:
            self.imginfo['path'] = img
            self.imginfo['pixbuf'] = gdk.pixbuf_new_from_file(img).apply_embedded_orientation()
            self.imginfo['is_static'] = True

        self.imginfo['width'] = self.imginfo['pixbuf'].get_width()
        self.imginfo['height'] = self.imginfo['pixbuf'].get_height()

    def updateimage(self):
        gap = self.buttons.get_allocation().height # taille des boutons à réserver        
        pix = self.imginfo['pixbuf']
        iw,ih = self.imginfo['width'], self.imginfo['height']
        
        # on cherche la taille de l'image la plus adaptée
        ow,oh = iw,ih
        if not self.isfull:
            if iw > self.sw: 
                ow,oh = self.sw, ih*self.sw/iw 
            if oh > self.sh: 
                ow,oh = iw*self.sh/ih, self.sh
        else:
            if iw > self.sw or ih > self.sh:
                ow,oh = self.sw/screen_ratio, ih*self.sw/screen_ratio/iw - gap
                if oh > self.sh: 
                    ow,oh = iw*self.sh/screen_ratio/ih, self.sh/screen_ratio - gap

        # on redimensionne l'image
        if self.imginfo['is_static']:
            pix = pix.scale_simple(int(ow),int(oh), gdk.INTERP_BILINEAR)
            self.image.set_from_pixbuf(pix)
        else:
            self.image.set_from_animation(pix)
        del pix

        # on change la taille de la fenêtre
        if self.isfull:
            self.window.resize(gdk.screen_width(),gdk.screen_height())
        else:
            if ow < minimal_w:
                self.window.resize(minimal_w, int(oh+gap))
            else:
                self.window.resize(int(ow),int(oh+gap))
                
    def toggle_fullscreen(self):
        if self.isfull: # on passe en taille normale
            self.window.unfullscreen()
            self.buttons.show()
            self.isfull = False
            self.updateimage()
            
            self.fullbtn.set_label(_("Fullscreen"))
            image = gtk.Image()
            image.set_from_stock(gtk.STOCK_FULLSCREEN, gtk.ICON_SIZE_MENU)
            self.fullbtn.set_image(image)

        else:# On passe en plein écran
            self.isfull = True
            self.window.fullscreen()
            self.buttons.hide()
            self.updateimage()

            self.fullbtn.set_label(_("Restore screen"))
            image = gtk.Image()
            image.set_from_stock(gtk.STOCK_UNDO, gtk.ICON_SIZE_MENU)
            self.fullbtn.set_image(image)

    def open_image(self):
        i = select_image()
        if i :
            self.set_image(i)

    def onButtonPress(self, widget, event):
        if self.zoommode and self.imginfo['is_static']: # pas besoin d'aller plus loin sinon
            if event.button == 1:
                self.xz_orig, self.yz_orig = int(event.x), int(event.y)
        else:
            if event.button == 1 :
                if event.type == gdk._2BUTTON_PRESS: # double clic gauche
                    self.toggle_fullscreen()
                elif not self.isfull and (event.get_time() - self.oldtime > 500 ):
                    self.window.begin_move_drag(event.button, int(event.x_root), int(event.y_root), event.time)
                    self.oldtime = event.get_time()
        if event.button == 3 or event.button == 2: # n'importe quel autre bouton
            self.onMenuPopup(event.get_time())
            

    def onKeyPress(self, win, event):
        key = gdk.keyval_name(event.keyval)
        if key == 'Escape' or key == 'q':
            if not self.isfull:
                self.quit_app()
            else:
                if self.diapomode :
                    self.diapomode = False
                self.toggle_fullscreen()
        elif key == 'p':
            self.diaporama()
        elif key == 'z':
            self.toggle_zoom()
        elif key == 'equal':
            self.back_to_nomal()
        elif key == 'f':
            self.toggle_fullscreen()
        elif key == 'Right' or key == 'n':
            self.skipImage(+1)
        elif key == 'Left' or key == 'b':
            self.skipImage(-1)
        elif key == 'o': 
            self.open_image()
        elif key == 'm': 
            self.onMenuPopup(event.get_time())
        elif key == 'd': 
            self.rotate(90)
        elif key == 'g': 
            self.rotate(-90)
        elif key == 'h': 
            self.window.set_title("Handylinux rocks!")
        elif key == 'a': 
            self.window.set_title("arpinux needs beers!")

    def onMenuPopup(self, time=0):
        self.app_menu = self.set_menu()
        self.app_menu.show_all()
        self.app_menu.popup(None, None, None, 3, time, 0)

    def set_menu(self):
        menu = gtk.Menu()

        op = gtk.ImageMenuItem(gtk.STOCK_OPEN)
        op.connect('activate', lambda w: self.open_image())
        menu.append(op)
        menu.append(gtk.SeparatorMenuItem())

        rotater = gtk.ImageMenuItem(gtk.STOCK_CONVERT)
        rotater.set_label(_("Rotate right"))
        rotater.connect('activate', lambda w: self.rotate(90))
        menu.append(rotater)

        rotatel = gtk.ImageMenuItem(gtk.STOCK_CONVERT)
        rotatel.set_label(_("Rotate left"))
        rotatel.connect('activate', lambda w: self.rotate(-90))
        menu.append(rotatel)
        
        zoom = gtk.ImageMenuItem(gtk.STOCK_ZOOM_IN)
        if self.zoommode :
            zoom.set_label(_("Disable zoom"))
            zoom.connect('activate', lambda w: self.toggle_zoom())
        else:
            zoom.set_label(_("Zoom"))
            zoom.connect('activate', lambda w: self.toggle_zoom())
        menu.append(zoom)
        
        if self.diapomode:
            diapo = gtk.ImageMenuItem(gtk.STOCK_MEDIA_STOP)
            diapo.set_label(_("Disable slideshow"))
        else:
            diapo = gtk.ImageMenuItem(gtk.STOCK_MEDIA_PLAY)
            diapo.set_label(_("Enable slideshow"))
        diapo.connect('activate', lambda w: self.diaporama())
        menu.append(diapo)
        
        for editor in editors:
            if os.path.exists('/usr/bin/{}'.format(editor['app'])):
                edit = gtk.ImageMenuItem(gtk.STOCK_EDIT)
                edit.set_label(_("Edit with {}").format(editor['name']))
                edit.connect('activate', self.openWith, editor['app'])
                menu.append(edit)

        menu.append(gtk.SeparatorMenuItem())
        apropos = gtk.ImageMenuItem(gtk.STOCK_HELP)
        apropos.connect('activate', self.about)
        menu.append(apropos)
        close = gtk.ImageMenuItem(gtk.STOCK_CLOSE)
        close.connect('activate', lambda w: self.quit_app())
        menu.append(close)

        return menu

    def skipImage(self, position):
        path = self.imginfo['path']
        d, f = os.path.dirname(path), os.path.basename(path)
        files = listFiles(d)
        for n,i in enumerate(files):
            if f == i:
                try: f = files[n+position]
                except: f = files[0]
                self.set_image(os.path.join(d, f))
                break

    def rotate(self,angle):
        pix = self.imginfo['pixbuf']
        if angle == 90:
            rotated = pix.rotate_simple(gtk.gdk.PIXBUF_ROTATE_CLOCKWISE)
        elif angle == -90:
            rotated = pix.rotate_simple(gtk.gdk.PIXBUF_ROTATE_COUNTERCLOCKWISE)

        self.imginfo['pixbuf'] = rotated
        self.imginfo['width'], self.imginfo['height'] = rotated.get_width(), rotated.get_height()

        if self.imginfo['is_static']:
            self.image.set_from_pixbuf(rotated)
        else:
            self.image.set_from_animation(rotated)
        self.updateimage()
        del pix
        del rotated

    def openWith(self, widget, data=None):
        import subprocess
        try:
            subprocess.Popen([data, self.imginfo['path']])
        except:
            print("Error at opening {} with {}".format(self.imginfo['path'], data))

    def about(self, wid=None, data=None):
        # fenêtre à propos.
        m = gtk.MessageDialog(type=gtk.MESSAGE_INFO,\
            buttons = gtk.BUTTONS_OK)
        m.set_markup(_("""<b>{}</b>
version : {}
author : {}
licence : {}
homepage : {}
---
usage :
Use arrows, b and n keys to change image
Double click or press f key to enlarge the window
Press o to open a new image
Press d or g to turn the image
Press z to toggle zoom mode
Press = to restore the image
Press p to start slideshow mode
Press m or right click to show the menu
Press Escape or q to quit""").format(progname, version, auteur, licence, homepage))
        ret = m.run()
        if ret == gtk.RESPONSE_DELETE_EVENT or ret == gtk.RESPONSE_OK:
            m.destroy()

def main():
    if len(sys.argv) == 1 :  # si aucune image en argument
        img = select_image()
        if not img :
            sys.exit()       # on quitte s'il n'y a pas d'image choisie
    elif len(sys.argv) == 2:
        img = os.path.abspath(sys.argv[1])

    if os.path.isdir(img):   # si c'est un répertoire
        imglist = sorted(os.listdir(img))
        if len(imglist) > 0: # on ouvre les images du répertoire
            img = os.path.join(img,imglist[0])

    try: 
        window = Cyclope(img) # ouverture d'une image
    except Exception as e:
        help()
        error_dlg(e)

    return 0

if __name__ == '__main__':
    main()

# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
